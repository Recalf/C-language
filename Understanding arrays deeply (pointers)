
#include <stdio.h>

int main(void)
{

    // %c of s[2] == *(s + 2) (s of the char* pointer)
    // arr == &arr[0]. so arr gives the memory of arr[0] and *arr gives the value of arr[0]
    // when you do something* a (you need it to) = &b, because a pointer points at THE ADRESS
    // char* n = "hi"; works without & (like int* n = &a; (a is an int)) because the compiler automatically add & of the first char of "xx" in the variable when he see "xx"

    int arr[3] = {10, 20, 30};

    printf("Address of arr: %p\n", arr);     // Prints the address of arr[0]
    printf("Value at arr: %i\n", *arr);      // Prints the value at arr[0], which is 10

    printf("Address of arr + 1: %p\n", arr + 1);  // Prints the address of arr[1]
    printf("Value at arr + 1: %i\n", *(arr + 1)); // Prints the value at arr[1], which is 20

    printf("Address of arr + 1: %p\n", &arr[0] + 1);  // Prints the address of arr[1]
    printf("Value at arr + 1: %i\n", *(&arr[0] + 1));

    printf("%p\n", arr); // ==  printf("%p\n", &arr[0]);
    printf("%i\n", *arr);// == printf("%i\n", arr[0]);


    printf("Address of arr + 2: %p\n", arr + 2);  // Prints the address of arr[2]
    printf("Value at arr + 2: %i\n", *(arr + 2)); // Prints the value at arr[2], which is 30


}
